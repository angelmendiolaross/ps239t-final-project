pop_plot_2000<- ggplot(data=pop2000, aes(x=reorder(NAME,value), y=value/1000000)) +
geom_bar(stat="identity") + coord_flip() +
theme_minimal() +
labs(title = "2000 US Population by State") +
xlab("State") +
ylab("in millions")
# calling the plot
pop_plot_2000
# County FIPS Codes for
# Alameda, SF, Contra Costa, Marin County, Napa,
# San Mateo, Santa Clara,  Solano,  Sonoma, santa cruz
nine_counties <- c("001", "075", "013", "041", "055", "081", "085", "095", "097")
#urban rural pop for 3 counties
ur_pop10 <- get_decennial(geography = "county",  # census tabulation unit
variables = c(urban="P002002",rural="P002005"),
year = 2010,
summary_var = "P002001",  # The denominator
state='CA',
county=c("Napa","Sonoma","Mendocino"))
ur_pop10
# Calculate the percent of population that is Urban or Rural
ur_pop10 <- ur_pop10 %>%
mutate(pct = 100 * (value / summary_value))
ur_pop10 # Take a look
myplot <- ggplot(data = ur_pop10,
mapping = aes(x = NAME, fill = variable,
y = ifelse(test = variable == "urban",
yes = -pct, no = pct))) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = abs, limits=c(-100,100)) +
labs(title="Urban & Rural Population in Wine Country",
x="County", y = " Percent of Population", fill="") +
coord_flip()
myplot
# Tigris options - used by tidycensus
options(tigris_class = "sf")      # SP is the default format returned by tigris
options(tigris_use_cache = TRUE)  # Save retrieved data locally
# Check the location of the tigris cached data
Sys.getenv('TIGRIS_CACHE_DIR')
# Set it
tigris_cache_dir("~/Desktop/gis_data")  # Folder for local data
# Check it again
Sys.getenv('TIGRIS_CACHE_DIR')
pop2010geo <- get_decennial(geography = "state",
variables = c(pop10="P001001"),
year = 2010,
output="wide",
geometry=TRUE) # Fetch geometry with the data for mapping
View(pop2010geo)
pop2010geo
plot(pop2010geo$geometry)
pop2010geo_shifted <- get_decennial(geography = "state",
variables = c(pop10="P001001"),
output="wide",
year = 2010,
geometry=TRUE,
shift_geo=TRUE)
plot(pop2010geo_shifted$geometry)
st_write(pop2010geo_shifted,"usa_2010_shifted.shp")
my_cache_dir <- Sys.getenv('TIGRIS_CACHE_DIR')
dir(my_cache_dir) # What files stored there?
list.files()
plot(pop2010geo_shifted['pop10'])
ggplot(pop2010geo_shifted, aes(fill = pop10)) +
geom_sf()
ggplot(pop2010geo_shifted, aes(fill = pop10)) +
geom_sf()
#fetch it
cal_pop10 <- get_decennial(geography = "county",
variables = "P001001",
year = 2010,
state='CA',
geometry=TRUE)
# map it
plot(cal_pop10['value'])
alcc_pop10 <- get_decennial(geography = "tract",
variables = "P001001",
year = 2010,
state='CA',
county=c("Alameda","Contra Costa"),
geometry=T)
plot(alcc_pop10['value'])
ie_rented <- get_decennial(geography = "tract",  # census tabulation unit
variables =  "H004004",
year = 2010,
summary_var = "H004001",  # Total Urban - the denominator
state='CA',
county=c("San Bernardino","Riverside"),
geometry=T)
ie_pct_rented <- ie_rented[ie_rented$value > 0,] %>%
mutate(pct = 100 * (value / summary_value))
plot(ie_pct_rented['pct'])
ie_poor <- get_acs(geography = "tract",
variables = c('C17002_002','C17002_003'), # poverty variables
year = 2018,
state="CA",
summary_var = "C17002_001", # Est of num people - denom
county="San Bernardino",
geometry=T)
ie_poor
# What are we mapping?
plot(ie_poor['estimate'])
# Remove census tracts that have no people!
ie_poor <- subset(ie_poor, summary_est > 0)
# What are we mapping?
plot(ie_poor['estimate'])
ie_poor <- ie_poor %>%
mutate(pct = 100 * (estimate / summary_est))
head(ie_poor, 3)
ie_poor_summed <- ie_poor %>%
select(GEOID, estimate, pct, geometry) %>%
group_by(GEOID) %>%
summarise(count_below_pov = sum(estimate),
pct_below_pov = sum(pct))
head(ie_poor_summed)
plot(ie_poor_summed['count_below_pov'])
head(ie_poor, 3)
head(ie_poor_summed)
ie_poor_summed <- ie_poor %>%
select(GEOID, estimate, pct, geometry) %>%
summarise(count_below_pov = sum(estimate),
pct_below_pov = sum(pct))
head(ie_poor_summed)
ie_poor %>%
select(GEOID, estimate, pct, geometry) %>%
group_by(GEOID) %>%
summarise(count_below_pov = sum(estimate),
pct_below_pov = sum(pct))
knitr::opts_knit$set(root.dir = '/Users/angelmr/ma_v2/data')
### Clear global environment
rm(list=ls())
# Set working directory
getwd()
# install.packages("readxl") # Needed this for reading in xlsx files which is how the state provides raw data
# install.packages("DataCombine") # Needed this for the slide function to lad/lead variables
library(pacman)
pacman::p_unload(all)
pacman::p_load(
tidyverse, #dplyr, readr, etc.
plyr, #for editing factor levels
magrittr, #%<>% operator
readxl, #for excel workbooks
tidyr, #to transform from wide to long
ggplot2, #for plotting
DataCombine # for lagging and leading variables
)
# load data
load("policing_data_9217.RData")
load("city_fin_data.RData")
# looking at the variables
names(city_fin_data) # dataset has 23 columns
names(police_long) # dataset has 4 columns
# load data
load("policing_data_9217.RData")
load("city_fin_data.RData")
# looking at the variables
names(city_fin_data) # dataset has 23 columns
names(police_long) # dataset has 4 columns
# getting rid of columns not going into my analysis of city police spending
city_fin_small <- city_fin_data[c(2,1,3:7,13,16,17,19,22)]
names(city_fin_small) # now city_fin_small is down to 12 vars
# adding additional columns to police_long
police_long %<>%
mutate(entity_id.x = NA,
total_expend = NA,
total_rev = NA,
public_safety_expend = NA,
total_fines_rev = NA,
total_tax_rev = NA,
sales_tax_rev = NA,
prop_tax_rev = NA,
total_fed_rev = NA)
# now rearranging to match the order of city_fin_small
police_long <- police_long[c(1,2,5:7,4,8:13)]
# getting rid of 2003-2017 data because i already have it in the first dataset
police_9002 <- police_long %>%
subset(year < 2003)
# checking to make sure i got the right years
unique(police_9002$year) #1992-2002 perfect
# final step: renaming the city column in police_9002
police_9002 %<>% dplyr::rename(city_name = City)
# creating a new data frame with the complete data
policing_complete <- rbind(police_9002, city_fin_small)
# saving complete policing data
save(policing_complete,
file = "policing_complete.RData")
# assigning police_total as numerical
policing_complete$police_total <- as.numeric(as.character(policing_complete$police_total))
# plotting the policing variable
ggplot(policing_complete, aes(x = year, y = police_total)) +
geom_point() +
geom_smooth(method = "lm") +
scale_y_log10()
# looking at the mean and median
policing_complete %>%
summarise(mean_police = mean(police_total, na.rm = T),
median_police = median(police_total, na.rm = T))
# get data from the excel file
cpi <- read_excel("raw/consumer_price_index.xlsx", sheet = "ca_clean")
# rename Year to year for join
cpi %<>% dplyr::rename(year = Year)
# join cpi to the policing data
policing_complete <- left_join(policing_complete, cpi, by = "year")
# rename cpi column to base_cpi
policing_complete %<>% dplyr::rename(base_cpi = CPI)
# dropping unneeded columns
policing_complete <- policing_complete[c(1:12,14)]
# checking 2018 CPI value
policing_complete %>%
subset(year==2018) %>%
select(base_cpi)
# 272.5
# adding a new_cpi column to reflect 2018 CPI: 272.5
policing_complete %<>%
mutate(new_cpi = 272.5)
# now calculating the inflation-adjusted values of police_total, which is (nominal_value) * (new_cpi/base_cpi)
policing_complete %<>%
mutate(police_infl_adj = NA) %>%
mutate(police_infl_adj = ifelse(!is.na(police_total), police_total * (new_cpi/base_cpi), police_infl_adj))
# checking a random sample to make sure it looks right
policing_complete %>%
select(year,city_name,police_total,police_infl_adj) %>%
sample_n(size = 10)
# plotting the inflation-adjusted policing variable
ggplot(policing_complete, aes(x = year, y = police_infl_adj)) +
geom_point() +
geom_smooth(method = "lm") +
scale_y_log10()
ggplot(policing_complete, aes(x = year, y = police_infl_adj)) +
geom_point() +
geom_smooth(method = "lm") +
ylim(0,100000000)
# checking change over time for summary variables
policing_complete %>%
subset(year==2000) %>%
summarise(mean_police = mean(police_total, na.rm = T),
median_police = median(police_total, na.rm = T),
mean_police_adj = mean(police_infl_adj, na.rm = T),
median_police_adj = median(police_infl_adj, na.rm = T))
# inflation-adjusted median was $5,929,492 in 2000
policing_complete %>%
subset(year==2018) %>%
summarise(mean_police = mean(police_total, na.rm = T),
median_police = median(police_total, na.rm = T),
mean_police_adj = mean(police_infl_adj, na.rm = T),
median_police_adj = median(police_infl_adj, na.rm = T))
# inflation-adjusted median was $8,536,630 in 2018
# finally, adjusting federal transfers for inflation
# formula is (nominal_value) * (new_cpi/base_cpi)
policing_complete %<>%
mutate(fed_transfers_infl_adj = NA) %>%
mutate(fed_transfers_infl_adj = ifelse(!is.na(total_fed_rev), total_fed_rev * (new_cpi/base_cpi), fed_transfers_infl_adj))
# checking a random sample to make sure it looks right
policing_complete %>%
select(year,city_name,total_fed_rev,fed_transfers_infl_adj) %>%
sample_n(size = 10)
# first I need to make sure R understands the ordering of my years (not having this step created an issue)
dates <- unique(sort(policing_complete$year))
policing_complete$year <- factor(policing_complete$year, labels = dates,  ordered = T)
policing_complete %>% nrow() #rows in dataset=12928
policing_complete %>% distinct() %>% nrow() #unique rows in dataset=12928
# leading the inflation-adjusted policing measure by 1 year using slide function
policing_complete_test <- slide(policing_complete, Var = "police_infl_adj", TimeVar = "year", GroupVar = "city_name", NewVar = "police_infl_lead", slideBy = 1, keepInvalid = TRUE)
# checking a few cities to make sure it looks right
policing_complete_test %>%
subset(year >= 2008 & year <= 2018 & city_name == "Barstow") %>%
select(year,city_name,police_infl_adj,police_infl_lead)
policing_complete_test %>%
subset(year >= 2006 & year <= 2009 & city_name == "Portola Valley") %>%
select(year,city_name,police_infl_adj,police_infl_lead)
policing_complete_test %>%
subset(year >= 2011 & year <= 2018 & city_name == "Corona") %>%
select(year,city_name,police_infl_adj,police_infl_lead)
# leading two years to also test if it makes a difference
policing_complete_lead <- slide(policing_complete_test, Var = "police_infl_adj", TimeVar = "year", GroupVar = "city_name", NewVar = "police_infl_lead_2", slideBy = 2, keepInvalid = TRUE)
# checking some random cities
policing_complete_lead %>%
subset(year >= 2009 & year <= 2018 & city_name == "Temecula") %>%
select(year,city_name,police_infl_adj,police_infl_lead,police_infl_lead_2)
# saving this cleaned file
save(policing_complete_lead,
file = "policing_complete_lead.RData")
knitr::opts_knit$set(root.dir = '/Users/angelmr/ma_v2/data')
### Clear global environment
rm(list=ls())
# Set working directory
getwd()
### Clear global environment
rm(list=ls())
# Set working directory
getwd()
library(pacman)
pacman::p_unload(all)
pacman::p_load(
tidyverse, #dplyr, readr, etc.
plyr, #for editing factor levels
magrittr, #%<>% operator
readxl, #for excel workbooks
tidyr, #to transform from wide to long
ggplot2, #for plotting
tidycensus #census api
)
# the years I want data for
years <- lst(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018)
tenure_blkgroup <- c(
total_hhs = "B25003_001",
owner_hhs = "B25003_002",
renter_hhs = "B25003_003",
total_pop = "B03002_001",
nhw = "B03002_003",
nhb = "B03002_004",
nha = "B03002_006",
nhmixed = "B03002_009",
his = "B03002_012")
#census api key
census_api_key("1ce78664b294208f88f53c49746f378a51893b62")
tenure_by_blkgrp <- map_dfr(
years,
~ get_acs(
geography = "block group",
variables = tenure_blkgroup,
state = "CA",
year = .x,
survey = "acs5"
),
.id = "year"
)
# the main variables I need (household-level data for tenure and people-level data for race/ethnicity)
tenure_blkgroup <- c(
total_hhs = "B25003_001",
owner_hhs = "B25003_002",
renter_hhs = "B25003_003",
total_pop = "B03002_001",
nhw = "B03002_003",
nhb = "B03002_004",
nha = "B03002_006",
his = "B03002_012")
tenure_by_blkgrp <- map_dfr(
years,
~ get_acs(
geography = "block group",
variables = tenure_blkgroup,
state = "CA",
year = .x,
survey = "acs5"
),
.id = "year"
)
get_acs(geography = "block group",
variables = tenure_blkgroup,
state = "CA",
year = c(2009,2010),
survey = "acs5")
get_acs(geography = "block group",
variables = tenure_blkgroup,
state = "CA",
year = 2009,
survey = "acs5")
knitr::opts_knit$set(root.dir = '/Users/angelmr/ma_v2/data')
### Clear global environment
rm(list=ls())
# Set working directory
getwd()
library(pacman)
pacman::p_unload(all)
pacman::p_load(
tidyverse, #dplyr, readr, etc.
plyr, #for editing factor levels
magrittr, #%<>% operator
readxl, #for excel workbooks
tidyr, #to transform from wide to long
ggplot2, #for plotting
tidycensus #census api
)
#census api key
census_api_key("1ce78664b294208f88f53c49746f378a51893b62")
tenure_bg_09 <- get_acs(geography = "block group",
variables = tenure_blkgroup,
state = "CA",
year = 2009,
survey = "acs5")
tenure_blkgroup <- c(
total_hhs = "B25003_001",
owner_hhs = "B25003_002",
renter_hhs = "B25003_003",
total_pop = "B03002_001",
nhw = "B03002_003",
nhb = "B03002_004",
nha = "B03002_006",
his = "B03002_012")
tenure_bg_09 <- get_acs(geography = "block group",
variables = tenure_blkgroup,
state = "CA",
year = 2009,
survey = "acs5")
View(tenure_bg_09)
tenure_bg_10 <- get_acs(geography = "block group",
variables = tenure_blkgroup,
state = "CA",
year = 2010,
survey = "acs5")
# the years I want data for
years <- lst(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018)
### Clear global environment
rm(list=ls())
# Set working directory
getwd()
library(pacman)
pacman::p_unload(all)
pacman::p_load(
tidyverse, #dplyr, readr, etc.
plyr, #for editing factor levels
magrittr, #%<>% operator
readxl, #for excel workbooks
tidyr, #to transform from wide to long
ggplot2, #for plotting
tidycensus, #census api
purrr #for map function
)
#census api key
census_api_key("1ce78664b294208f88f53c49746f378a51893b62")
years <- lst(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018)
tenure_blkgroup <- c(
total_hhs = "B25003_001",
owner_hhs = "B25003_002",
renter_hhs = "B25003_003",
total_pop = "B03002_001",
nhw = "B03002_003",
nhb = "B03002_004",
nha = "B03002_006",
his = "B03002_012")
tenure_by_blkgrp <- map2_dfr(
years,
~ get_acs(
geography = "block group",
variables = tenure_blkgroup,
state = "CA",
year = .x,
survey = "acs5",
geometry = FALSE
),
.id = "year"
)
tenure_by_blkgrp <- map_dfr(
years,
~ get_acs(
geography = "block group",
variables = tenure_blkgroup,
state = "CA",
year = .x,
survey = "acs5",
geometry = FALSE
),
.id = "year"
)
tenure_bg_10 <- get_acs(geography = "block group",
variables = tenure_blkgroup,
state = "CA",
year = 2010,
survey = "acs5")
tenure_bg_11 <- get_acs(geography = "block group",
variables = tenure_blkgroup,
state = "CA",
year = 2011,
survey = "acs5")
tidycensus::fips_codes
# getting CA county fips codes
fips <- tidycensus::fips_codes
View(fips)
my_state <- c("CA")
my_counties <- fips %>%
filter(state %in% my_state)
View(my_counties)
View(my_counties)
map2_dfr(.x = my_counties$state_code,
map2_dfr(.x = my_counties$state_code,
tenure_by_blkgrp <- map_dfr(
years,
~ get_acs(
geography = "block group",
variables = tenure_blkgroup,
state = "CA",
year = .x,
survey = "acs5",
geometry = FALSE
),
.id = "year")
tenure_by_blkgrp <- map_dfr(
tenure_bg_10 <- get_acs(geography = "block group",
variables = tenure_blkgroup,
state = "CA",
year = 2010,
survey = "acs5")
knitr::opts_knit$set(root.dir = '/Users/angelmr/ma_v2/data')
### Clear global environment
rm(list=ls())
# Set working directory
getwd()
library(pacman)
pacman::p_unload(all)
pacman::p_load(
tidyverse, #dplyr, readr, etc.
plyr, #for editing factor levels
magrittr, #%<>% operator
readxl, #for excel workbooks
tidyr, #to transform from wide to long
ggplot2, #for plotting
tidycensus #census api
#purrr #for map function
)
#census api key
census_api_key("1ce78664b294208f88f53c49746f378a51893b62")
